// =================================================================
// lya.bnf
//
// This file defines the grammar for lya programming Language.
// This language combine features of some modern languages.
// The purpose of "lya" is the use in compiler construction courses
//
// Copyright (C) 2015, Marcio Machado Pereira
// License: BSD
// =================================================================
//
// Notation
//     { ... }*   repetition possibly zero times
//     { ... }+   repetition at least once
//     [ ... ]    optional
//     ... | ...  alternative
//
// Reserved words
//     ARRAY, BY, CHARS, DCL, DO, DOWN, ELSE, ELSIF, END, EXIT, FI,
//     FOR, IF, IN, LOC, TYPE, OD, PROC, REF, RESULT, RETURN, RETURNS,
//     SYN, THEN, TO, WHILE, ASSERT
//
// Predefined words
//         BOOL, CHAR, FALSE, INT, LENGTH, LOWER, NULL, NUM,
//         PRED, PRINT, READ, SUCC, TRUE, UPPER, NEW, FREE

{
    tokens = [
        ARRAY = 'array'
        BY = 'by'
        CHARS = 'chars'
        DCL = 'dcl'
        DO = 'do'
        DOWN = 'down'
        ELSE = 'else'
        ELSEIF = 'elseif'
        END = 'end'
        EXIT = 'exit'
        FI = 'fi'
        FOR = 'for'
        IF = 'if'
        IN = 'in'
        LOC = 'loc'
        TYPE = 'type'
        OD = 'od'
        PROC = 'proc'
        REF = 'ref'
        RESULT = 'result'
        RETURN = 'return'
        RETURNS = 'returns'
        SYN = 'syn'
        THEN = 'then'
        TO = 'to'
        WHILE = 'while'
        BOOL = 'bool'
        CHAR = 'char'
        FALSE = 'false'
        INT = 'int'
        LENGTH = 'length'
        LOWER = 'lower'
        NULL = 'null'
        NUM = 'num'
        PRED = 'pred'
        PRINT = 'print'
        READ = 'read'
        SUCC = 'succ'
        TRUE = 'true'
        UPPER = 'upper'
        ASSERT = 'assert'
        NEW = 'new'
        FREE = 'free'
        STRUCT = 'struct'
        LPAREN = '('
        RPAREN = ')'
        LBRACKET = '['
        RBRACKET = ']'

        identifier = 'regexp:[a-zA-Z_][a-zA-Z_0-9]+'
        character = 'regexp:.'
        digit = 'regexp:\d'
    ]
}

program ::= { statement }+ !<<eof>>

statement ::=
      declaration_statement
      | synonym_statement
      | newmode_statement
      | procedure_statement
      | action_statement

declaration_statement ::= DCL declaration_list ';'

declaration_list ::= declaration { ',' declaration }*

declaration ::= identifier_list mode [ initialization ]

initialization ::=  '=' expression

identifier_list ::= identifier { ',' identifier }*

synonym_statement ::= SYN synonym_list ';'

synonym_list ::= synonym_definition { ',' synonym_definition }*

synonym_definition ::= identifier_list [ mode ] '=' constant_expression

constant_expression ::= expression

newmode_statement ::= TYPE newmode_list ';'

newmode_list ::= mode_definition { ',' mode_definition }*

mode_definition ::= identifier_list '=' mode

mode ::=
       mode_name
       | discrete_mode
       | reference_mode
       | composite_mode

mode_name ::= identifier

discrete_mode ::=
      integer_mode
      | boolean_mode
      | character_mode
      | discrete_range_mode

integer_mode ::=  INT

boolean_mode ::=  BOOL

character_mode ::= CHAR

discrete_range_mode ::=
      discrete_mode_name LPAREN literal_range RPAREN
      | discrete_mode LPAREN literal_range RPAREN

discrete_mode_name ::= identifier

literal_range ::= integer_literal ':' integer_literal

reference_mode ::= REF mode

composite_mode ::=
        string_mode
      | array_mode
      | struct_mode

string_mode ::= CHARS LBRACKET expression RBRACKET

array_mode ::= ARRAY LBRACKET index_mode_list RBRACKET element_mode

index_mode_list ::= index_mode { ',' index_mode }*

index_mode ::= literal_range

element_mode ::= mode

struct_mode ::= STRUCT LPAREN field_list RPAREN

field_list ::= field { ',' field }*

field ::= identifier_list mode

location ::=
      location_name
      | dereferenced_reference
      | composite_element
      | composite_slice
      | procedure_call

location_name ::= identifier

dereferenced_reference ::= primitive_value '->'

composite_element ::= location LBRACKET expression RBRACKET

expression_list ::= expression { ',' expression }*

composite_slice ::= location LBRACKET expression ':' expression RBRACKET

primitive_value ::=
      literal
      | value_array_element
      | value_array_slice
      | parenthesized_expression

value_name ::= synonym_name | value_enumeration_name

synonym_name ::= identifier

value_enumeration_name ::= identifier

literal ::=
      integer_literal
      | boolean_literal
      | character_literal
      | empty_literal
      | character_string_literal

integer_literal ::=  digit_sequence

digit_sequence ::= { digit | '_' }+

boolean_literal ::= FALSE | TRUE

character_literal ::= "'" character "'" | "'" 'regexp:[^\d]' "'"

empty_literal ::= NULL

character_string_literal ::= '"' { character | quote }* '"'

quote ::= '"'

value_array_element ::= array_primitive_value LBRACKET expression_list RBRACKET

value_array_slice ::= array_primitive_value LBRACKET expression ':' expression RBRACKET

array_primitive_value ::= primitive_value

parenthesized_expression ::= LPAREN expression RPAREN

expression ::= <operand0> | conditional_expression

conditional_expression ::=
    IF boolean_expression then_expression else_expression FI
    | IF boolean_expression then_expression elsif_expression else_expression FI

boolean_expression ::= expression

then_expression ::= THEN expression

else_expression ::= ELSE expression

elsif_expression ::=
    ELSIF boolean_expression then_expression
    | elsif_expression ELSIF boolean_expression then_expression

<operand0> ::=
      <operand1>
      | <operand0> <operator1> <operand1>

<operator1> ::=
      relational_operator
      | membership_operator

relational_operator ::= { '&&' | '||' | '!' | '==' | '!=' | '>' | '>=' | '<' | '<=' }

membership_operator ::= IN

<operand1> ::=
      <operand2>
      | <operand1> <operator2> <operand2>

<operator2> ::=
      arithmetic_additive_operator
      | string_concatenation_operator

arithmetic_additive_operator ::= '+' | '-'

string_concatenation_operator ::= '&'

<operand2> ::=
      <operand3>
      | <operand2> arithmetic_multiplicative_operator <operand3>

arithmetic_multiplicative_operator ::=  'âˆ—' | '/' | '%'

<operand3> ::=
      [ monadic_operator ] <operand4>
      | integer_literal

monadic_operator ::= '-' | '!'

<operand4> ::=  location | referenced_location | primitive_value

referenced_location ::= '->' location

action_statement_list ::= { action_statement }+

action_statement ::= [ label ':' ] action ;

label ::= identifier

action ::=
     bracketed_action
     | assert_action
     | assignment_action
     | call_action
     | exit_action
     | return_action
     | result_action

bracketed_action ::= if_action | do_action

assert_action ::= ASSERT boolean_expression

assignment_action ::=	location assigning_operator expression

assigning_operator ::= [closed_dyadic_operator] '='

closed_dyadic_operator ::=
    arithmetic_additive_operator
    | arithmetic_multiplicative_operator
    | string_concatenation_operator

if_action ::= IF boolean_expression then_clause [ else_clause ] FI

then_clause ::= THEN action_statement_list

else_clause ::=
      ELSE action_statement_list
      | ELSIF boolean_expression then_clause [ else_clause ]

do_action ::= DO [ control_part ';' ] action_statement_list OD

control_part ::=
        for_control
        | while_control

for_control ::= FOR { iteration }

iteration ::= value_enumeration | location_enumeration

value_enumeration ::= step_enumeration | range_enumeration

step_enumeration ::=
          loop_counter '='
      start_value [ step_value ] [ DOWN ] end_value

loop_counter ::= identifier

start_value ::= expression

step_value ::= BY expression

end_value ::= TO expression

range_enumeration ::= loop_counter [ DOWN ] IN discrete_mode_name

location_enumeration ::= loop_counter [ DOWN ] IN composite_object

composite_object ::=
       composite_location
       | composite_expression

composite_location ::= location

composite_expression ::= expression

while_control ::= WHILE boolean_expression

call_action ::=  procedure_call | builtin_call

procedure_call ::= { procedure_name } LPAREN [ parameter_list ] RPAREN

procedure_name ::= identifier

parameter_list ::= parameter { ',' parameter }*

parameter ::= expression

exit_action ::= EXIT label

return_action ::= RETURN [ result ]

result_action ::= RESULT result

result ::= expression

builtin_call ::= builtin_name LPAREN [ parameter_list ] RPAREN

builtin_name ::= NUM | PRED | SUCC | UPPER | LOWER | LENGTH | READ | WRITE | NEW | FREE

procedure_statement ::= label ':' procedure_definition ;

procedure_definition ::=
       PROC LPAREN [ formal_parameter_list ] RPAREN [ result_spec ]';'
       { action_statement }* END

formal_parameter_list ::= formal_parameter { ',' formal_parameter }*

formal_parameter ::= identifier_list parameter_spec

parameter_spec ::=  mode [ parameter_attribute ]

parameter_attribute ::= LOC

result_spec ::= RETURNS LPAREN mode [ result_attribute ] RPAREN

result_attribute::= LOC

comment ::= bracketed_comment | line_end_comment

bracketed_comment ::= '/*' character_string '*/'

line_end_comment ::= '//' character_string '/n'

character_string ::= { character }*
