
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBERCONST CHARCONST STRINGCONST COMMA COLON SEMICOLON EQUALS LPARENS RPARENS LBRACKET RBRACKET ARROW STRINGCONCAT PLUS MINUS TIMES DIVIDE MODULO AND OR NOT EQ NEQ LT LE GT GE IDENTIFIER ARRAY BY CHARS DCL DO DOWN ELSE ELSEIF END EXIT FI FOR IF IN LOC TYPE OD PROC REF RESULT RETURN RETURNS SYN THEN TO WHILE BOOL CHAR FALSE INT LENGTH LOWER NULL NUM PRED PRINT READ SUCC TRUE UPPER ASSERT NEW FREE STRUCTprogram : program statement\n                    | statementstatement : declaration_statement\n                    | synonym_statement\n                    | newmode_statement\n                    | procedure_statement\n                    | action_statementdeclaration_statement : DCL declaration_list SEMICOLONdeclaration_list : declaration_list COMMA declaration\n                         | declarationdeclaration : identifier_list mode\n                    | identifier_list mode initializationinitialization : EQUALS expressionidentifier_list : identifier_list COMMA identifier\n                        | identifieridentifier : IDENTIFIERsynonym_statement : SYN synonym_list SEMICOLONsynonym_list : synonym_list COMMA synonym_definition\n                        | synonym_definitionsynonym_definition : identifier_list EQUALS constant_expression\n                            | identifier_list mode EQUALS constant_expressionconstant_expression : expressionnewmode_statement : TYPE newmode_list SEMICOLONnewmode_list : newmode_list COMMA mode_definition\n                        | mode_definitionmode_definition : identifier_list EQUALS modeprocedure_statement : label COLON procedure_definition SEMICOLONprocedure_definition : PROC LPARENS formal_parameter_list RPARENS SEMICOLON procedure_body_statement_list END\n                    | PROC LPARENS formal_parameter_list RPARENS result_spec SEMICOLON procedure_body_statement_list ENDformal_parameter_list : formal_parameter_list COMMA formal_parameter\n                                | formal_parameter\n                                | emptyformal_parameter : identifier_list parameter_specparameter_spec : mode LOC\n                            | moderesult_spec : RETURNS LPARENS mode RPARENS\n                        | RETURNS LPARENS mode LOC RPARENSprocedure_body_statement_list : procedure_body_statement_list procedure_body_statement\n                                    | procedure_body_statementprocedure_body_statement : declaration_statement\n                    | action_statementaction_statement_list : action_statement_list action_statement\n                                | action_statementaction_statement : label COLON action SEMICOLON\n                            | action SEMICOLONlabel : IDENTIFIERaction : bracketed_action\n                | assert_action\n                | assignment_action\n                | call_action\n                | exit_action\n                | return_action\n                | result_actionbracketed_action : if_action\n                            | do_actionassert_action : ASSERT boolean_expressionassignment_action : location assigning_operator expressionassigning_operator : EQUALS\n                                | closed_dyadic_operator EQUALSclosed_dyadic_operator : arithmetic_additive_operator\n                                | arithmetic_multiplicative_operator\n                                | string_concatenation_operatorif_action : IF boolean_expression then_clause FI\n                    | IF boolean_expression then_clause else_clause FIthen_clause : THEN action_statement_listelse_clause : ELSE action_statement_list\n                    | ELSEIF boolean_expression then_clause\n                    | ELSEIF boolean_expression then_clause else_clausedo_action : DO action_statement_list OD\n                    | DO control_part SEMICOLON action_statement_list ODcontrol_part : for_control\n                        | while_controlfor_control : FOR iterationiteration : step_enumeration\n                    | range_enumerationstep_enumeration : loop_counter EQUALS start_value end_value\n                            | loop_counter EQUALS start_value step_value end_value\n                            | loop_counter EQUALS start_value DOWN end_value\n                            | loop_counter EQUALS start_value step_value DOWN end_valueloop_counter : IDENTIFIERstart_value : expressionstep_value : BY expressionend_value : TO expressionrange_enumeration : loop_counter IN range_definition\n                            | loop_counter DOWN IN range_definitionrange_definition : expressionwhile_control : WHILE boolean_expressioncall_action : procedure_call\n                        | builtin_callexit_action : EXIT labelreturn_action : RETURN\n                    | RETURN resultresult_action : RESULT resultresult : expressionbuiltin_call : builtin_name LPARENS RPARENS\n                        | builtin_name LPARENS parameter_list RPARENS builtin_name : NUM\n                        | PRED\n                        | SUCC\n                        | UPPER\n                        | LOWER\n                        | LENGTH\n                        | READ\n                        | PRINT\n                        | NEW\n                        | FREEmode : mode_name\n                | discrete_mode\n                | reference_mode\n                | composite_modemode_name : IDENTIFIERdiscrete_mode : INT\n                        | BOOL\n                        | CHARreference_mode : REF modecomposite_mode : string_mode\n                        | array_mode\n                        | struct_modestring_mode : CHARS LBRACKET integer_literal RBRACKETarray_mode : ARRAY LBRACKET index_mode_list RBRACKET element_modeelement_mode : modeindex_mode_list : index_mode_list COMMA index_mode\n                            | index_modeindex_mode : literal_rangestruct_mode : STRUCT LPARENS field_list RPARENSfield_list : field_list COMMA fields_declaration\n                   | fields_declarationfields_declaration : identifier_list modeliteral_range : integer_literal COLON integer_literalexpression_list : expression_list COMMA expression\n                        | expressionexpression : operand0\n                        | conditional_expressionconditional_expression : IF boolean_expression then_expression else_expression FI\n                                | IF boolean_expression then_expression elseif_expression else_expression FIboolean_expression : expressionthen_expression : THEN expressionelseif_expression : elseif_expression ELSEIF boolean_expression then_expression\n                            | ELSEIF boolean_expression then_expressionelse_expression : ELSE expressionoperand0 : operand0 operator1 operand1\n                    | operand1operator1 : relational_operator\n                    | membership_operatorrelational_operator : AND\n                                | OR\n                                | NOT\n                                | EQ\n                                | NEQ\n                                | GT\n                                | GE\n                                | LT\n                                | LEmembership_operator : INoperand1 : operand1 operator2 operand2\n                    | operand2operator2 : arithmetic_additive_operator\n                    | string_concatenation_operatorarithmetic_additive_operator : PLUS\n                                        | MINUSstring_concatenation_operator : STRINGCONCAToperand2 : operand2 arithmetic_multiplicative_operator operand3\n                    | operand3arithmetic_multiplicative_operator : TIMES\n                                            | DIVIDE\n                                            | MODULOoperand3 : operand4\n                   | monadic_operator operand4monadic_operator : MINUS\n                            | NOToperand4 : location\n                    | referenced_location\n                    | primitive_valuelocation : location_name\n                    | dereferenced_reference\n                    | composite_element\n                    | composite_slice\n                    | procedure_calllocation_name : IDENTIFIERdereferenced_reference : primitive_value ARROWcomposite_element : location LBRACKET expression RBRACKETcomposite_slice : location LBRACKET expression COLON expression RBRACKETreferenced_location : ARROW locationprimitive_value : literal\n                        | value_array_element\n                        | value_array_slice\n                        | parenthesized_expressionliteral : integer_literal\n                    | boolean_literal\n                    | character_literal\n                    | empty_literal\n                    | character_string_literalinteger_literal : NUMBERCONSTboolean_literal : FALSE\n                            | TRUEcharacter_literal : CHARCONSTempty_literal : NULLcharacter_string_literal : STRINGCONSTvalue_array_element : array_primitive_value LBRACKET expression_list RBRACKETvalue_array_slice : array_primitive_value LBRACKET expression COLON expression RBRACKETarray_primitive_value : primitive_valueparenthesized_expression : LPARENS expression RPARENSprocedure_call : procedure_name LPARENS RPARENS\n                            | procedure_name LPARENS parameter_list RPARENSprocedure_name : IDENTIFIERparameter_list : parameter_list COMMA parameter\n                        | parameterparameter : expressionempty :'
    
_lr_action_items = {'DCL':([0,1,2,3,4,5,6,7,66,79,130,149,153,217,218,304,318,319,320,321,322,327,328,],[8,8,-2,-3,-4,-5,-6,-7,-1,-45,-8,-17,-23,-27,-44,8,8,-39,-40,-41,8,-38,8,]),'SYN':([0,1,2,3,4,5,6,7,66,79,130,149,153,217,218,],[9,9,-2,-3,-4,-5,-6,-7,-1,-45,-8,-17,-23,-27,-44,]),'TYPE':([0,1,2,3,4,5,6,7,66,79,130,149,153,217,218,],[10,10,-2,-3,-4,-5,-6,-7,-1,-45,-8,-17,-23,-27,-44,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,10,23,27,28,29,30,31,37,66,69,70,71,74,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,123,124,125,127,129,130,131,133,142,149,150,151,153,154,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,206,210,214,217,218,219,223,226,229,230,231,232,233,235,237,240,241,250,255,258,259,263,268,275,279,282,287,295,296,304,318,319,320,321,322,323,327,328,],[13,13,-2,-3,-4,-5,-6,-7,71,71,71,97,112,97,97,97,13,97,-1,138,-15,-16,138,97,-45,97,97,-169,-170,97,97,97,-58,-159,-160,-164,-165,-166,-161,13,-43,192,97,97,97,97,-8,71,71,138,-17,71,97,-23,71,138,97,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,97,-157,-158,97,-59,13,-42,13,97,97,-14,71,97,-27,-44,71,97,97,13,97,13,13,97,97,97,97,97,138,138,97,97,13,97,138,71,71,97,97,97,13,13,-39,-40,-41,13,138,-38,13,]),'ASSERT':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[23,23,-2,-3,-4,-5,-6,-7,23,-1,23,-45,23,-43,-8,-17,-23,23,-42,23,23,-27,-44,23,23,23,23,23,23,-39,-40,-41,23,-38,23,]),'EXIT':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[27,27,-2,-3,-4,-5,-6,-7,27,-1,27,-45,27,-43,-8,-17,-23,27,-42,27,27,-27,-44,27,27,27,27,27,27,-39,-40,-41,27,-38,27,]),'RETURN':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[28,28,-2,-3,-4,-5,-6,-7,28,-1,28,-45,28,-43,-8,-17,-23,28,-42,28,28,-27,-44,28,28,28,28,28,28,-39,-40,-41,28,-38,28,]),'RESULT':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[29,29,-2,-3,-4,-5,-6,-7,29,-1,29,-45,29,-43,-8,-17,-23,29,-42,29,29,-27,-44,29,29,29,29,29,29,-39,-40,-41,29,-38,29,]),'IF':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,98,99,100,117,119,124,125,127,129,130,149,151,153,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,319,320,321,322,327,328,],[30,30,-2,-3,-4,-5,-6,-7,85,85,85,85,30,85,-1,30,-45,85,85,85,-58,30,-43,85,85,85,85,-8,-17,85,-23,-59,30,-42,30,30,85,85,-27,-44,85,85,30,85,30,30,85,85,85,85,85,85,85,30,85,85,85,85,30,30,-39,-40,-41,30,-38,30,]),'DO':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[31,31,-2,-3,-4,-5,-6,-7,31,-1,31,-45,31,-43,-8,-17,-23,31,-42,31,31,-27,-44,31,31,31,31,31,31,-39,-40,-41,31,-38,31,]),'NUM':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[40,40,-2,-3,-4,-5,-6,-7,40,-1,40,-45,40,-43,-8,-17,-23,40,-42,40,40,-27,-44,40,40,40,40,40,40,-39,-40,-41,40,-38,40,]),'PRED':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[41,41,-2,-3,-4,-5,-6,-7,41,-1,41,-45,41,-43,-8,-17,-23,41,-42,41,41,-27,-44,41,41,41,41,41,41,-39,-40,-41,41,-38,41,]),'SUCC':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[42,42,-2,-3,-4,-5,-6,-7,42,-1,42,-45,42,-43,-8,-17,-23,42,-42,42,42,-27,-44,42,42,42,42,42,42,-39,-40,-41,42,-38,42,]),'UPPER':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[43,43,-2,-3,-4,-5,-6,-7,43,-1,43,-45,43,-43,-8,-17,-23,43,-42,43,43,-27,-44,43,43,43,43,43,43,-39,-40,-41,43,-38,43,]),'LOWER':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[44,44,-2,-3,-4,-5,-6,-7,44,-1,44,-45,44,-43,-8,-17,-23,44,-42,44,44,-27,-44,44,44,44,44,44,44,-39,-40,-41,44,-38,44,]),'LENGTH':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[45,45,-2,-3,-4,-5,-6,-7,45,-1,45,-45,45,-43,-8,-17,-23,45,-42,45,45,-27,-44,45,45,45,45,45,45,-39,-40,-41,45,-38,45,]),'READ':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[46,46,-2,-3,-4,-5,-6,-7,46,-1,46,-45,46,-43,-8,-17,-23,46,-42,46,46,-27,-44,46,46,46,46,46,46,-39,-40,-41,46,-38,46,]),'PRINT':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[47,47,-2,-3,-4,-5,-6,-7,47,-1,47,-45,47,-43,-8,-17,-23,47,-42,47,47,-27,-44,47,47,47,47,47,47,-39,-40,-41,47,-38,47,]),'NEW':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[48,48,-2,-3,-4,-5,-6,-7,48,-1,48,-45,48,-43,-8,-17,-23,48,-42,48,48,-27,-44,48,48,48,48,48,48,-39,-40,-41,48,-38,48,]),'FREE':([0,1,2,3,4,5,6,7,31,66,78,79,117,119,130,149,153,183,185,186,187,217,218,229,231,232,263,304,318,319,320,321,322,327,328,],[49,49,-2,-3,-4,-5,-6,-7,49,-1,49,-45,49,-43,-8,-17,-23,49,-42,49,49,-27,-44,49,49,49,49,49,49,-39,-40,-41,49,-38,49,]),'LPARENS':([0,1,2,3,4,5,6,7,13,23,28,29,30,31,36,37,38,40,41,42,43,44,45,46,47,48,49,66,78,79,85,89,93,94,96,97,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,148,149,151,153,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,306,318,319,320,321,322,327,328,],[37,37,-2,-3,-4,-5,-6,-7,-205,37,37,37,37,37,125,37,127,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-1,37,-45,37,37,-169,-170,37,-205,37,37,-58,-159,-160,-164,-165,-166,-161,37,-43,37,37,37,37,-8,210,-17,37,-23,219,37,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,37,-157,-158,37,-59,37,-42,37,37,37,37,-27,-44,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,323,37,-39,-40,-41,37,-38,37,]),'NUMBERCONST':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,149,151,153,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,208,209,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,276,277,287,295,296,304,318,319,320,321,322,327,328,],[60,60,-2,-3,-4,-5,-6,-7,60,60,60,60,60,60,-1,60,-45,60,60,-169,-170,60,60,60,-58,-159,-160,-164,-165,-166,-161,60,-43,60,60,60,60,-8,-17,60,-23,60,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,60,-157,-158,60,-59,60,-42,60,60,60,60,60,60,-27,-44,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-39,-40,-41,60,-38,60,]),'FALSE':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,149,151,153,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,319,320,321,322,327,328,],[61,61,-2,-3,-4,-5,-6,-7,61,61,61,61,61,61,-1,61,-45,61,61,-169,-170,61,61,61,-58,-159,-160,-164,-165,-166,-161,61,-43,61,61,61,61,-8,-17,61,-23,61,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,61,-157,-158,61,-59,61,-42,61,61,61,61,-27,-44,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-39,-40,-41,61,-38,61,]),'TRUE':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,149,151,153,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,319,320,321,322,327,328,],[62,62,-2,-3,-4,-5,-6,-7,62,62,62,62,62,62,-1,62,-45,62,62,-169,-170,62,62,62,-58,-159,-160,-164,-165,-166,-161,62,-43,62,62,62,62,-8,-17,62,-23,62,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,62,-157,-158,62,-59,62,-42,62,62,62,62,-27,-44,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-39,-40,-41,62,-38,62,]),'CHARCONST':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,149,151,153,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,319,320,321,322,327,328,],[63,63,-2,-3,-4,-5,-6,-7,63,63,63,63,63,63,-1,63,-45,63,63,-169,-170,63,63,63,-58,-159,-160,-164,-165,-166,-161,63,-43,63,63,63,63,-8,-17,63,-23,63,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,63,-157,-158,63,-59,63,-42,63,63,63,63,-27,-44,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-39,-40,-41,63,-38,63,]),'NULL':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,149,151,153,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,319,320,321,322,327,328,],[64,64,-2,-3,-4,-5,-6,-7,64,64,64,64,64,64,-1,64,-45,64,64,-169,-170,64,64,64,-58,-159,-160,-164,-165,-166,-161,64,-43,64,64,64,64,-8,-17,64,-23,64,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,64,-157,-158,64,-59,64,-42,64,64,64,64,-27,-44,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-39,-40,-41,64,-38,64,]),'STRINGCONST':([0,1,2,3,4,5,6,7,23,28,29,30,31,37,66,78,79,85,89,93,94,96,98,99,100,105,106,107,108,109,110,117,119,124,125,127,129,130,149,151,153,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,181,183,185,186,187,205,214,217,218,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,319,320,321,322,327,328,],[65,65,-2,-3,-4,-5,-6,-7,65,65,65,65,65,65,-1,65,-45,65,65,-169,-170,65,65,65,-58,-159,-160,-164,-165,-166,-161,65,-43,65,65,65,65,-8,-17,65,-23,65,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,65,-157,-158,65,-59,65,-42,65,65,65,65,-27,-44,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-39,-40,-41,65,-38,65,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,66,]),'declaration_statement':([0,1,304,318,322,328,],[3,3,320,320,320,320,]),'synonym_statement':([0,1,],[4,4,]),'newmode_statement':([0,1,],[5,5,]),'procedure_statement':([0,1,],[6,6,]),'action_statement':([0,1,31,117,183,186,229,231,232,263,304,318,322,328,],[7,7,119,185,119,119,119,185,185,185,321,321,321,321,]),'label':([0,1,27,31,117,183,186,229,231,232,263,304,318,322,328,],[11,11,111,122,122,122,122,122,122,122,122,122,122,122,122,]),'action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[12,12,12,157,12,12,12,157,12,12,12,12,12,12,12,12,]),'bracketed_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'assert_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'assignment_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'call_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'exit_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'return_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'result_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'if_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'do_action':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'location':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[24,24,90,90,90,90,24,90,24,90,90,178,90,90,24,90,90,90,90,90,90,90,90,24,24,24,90,90,90,90,24,90,24,24,90,90,90,90,90,90,90,24,90,90,90,90,24,24,24,24,]),'procedure_call':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[25,25,95,95,95,95,25,95,25,95,95,95,95,95,25,95,95,95,95,95,95,95,95,25,25,25,95,95,95,95,25,95,25,25,95,95,95,95,95,95,95,25,95,95,95,95,25,25,25,25,]),'builtin_call':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'location_name':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'dereferenced_reference':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'composite_element':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'composite_slice':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'procedure_name':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'builtin_name':([0,1,31,78,117,183,186,187,229,231,232,263,304,318,322,328,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'primitive_value':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[39,39,92,92,92,92,39,92,39,92,92,39,92,92,39,92,92,92,92,92,92,92,92,39,39,39,92,92,92,92,39,92,39,39,92,92,92,92,92,92,92,39,92,92,92,92,39,39,39,39,]),'literal':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'value_array_element':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'value_array_slice':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'parenthesized_expression':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'integer_literal':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,208,209,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,276,277,287,295,296,304,318,322,328,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,243,247,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,247,302,54,54,54,54,54,54,54,]),'boolean_literal':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'character_literal':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'empty_literal':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'character_string_literal':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'array_primitive_value':([0,1,23,28,29,30,31,37,78,85,89,96,98,99,117,124,125,127,129,151,159,172,176,183,186,187,205,214,223,226,229,230,231,232,233,235,237,240,241,258,259,263,268,287,295,296,304,318,322,328,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'declaration_list':([8,],[67,]),'declaration':([8,131,],[68,203,]),'identifier_list':([8,9,10,131,150,154,210,219,279,282,],[69,74,77,69,74,77,250,255,250,255,]),'identifier':([8,9,10,131,133,150,154,210,219,279,282,],[70,70,70,70,206,70,70,70,70,70,70,]),'synonym_list':([9,],[72,]),'synonym_definition':([9,150,],[73,211,]),'newmode_list':([10,],[75,]),'mode_definition':([10,154,],[76,215,]),'boolean_expression':([23,30,85,124,230,259,287,],[80,116,175,193,264,289,310,]),'expression':([23,28,29,30,37,85,98,99,124,125,127,129,151,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[81,114,114,81,126,81,179,180,81,197,197,202,213,242,213,260,261,81,267,270,197,272,273,288,81,270,81,316,317,]),'operand0':([23,28,29,30,37,85,98,99,124,125,127,129,151,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'conditional_expression':([23,28,29,30,37,85,98,99,124,125,127,129,151,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'operand1':([23,28,29,30,37,85,98,99,124,125,127,129,151,159,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[84,84,84,84,84,84,84,84,84,84,84,84,84,220,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'operand2':([23,28,29,30,37,85,98,99,124,125,127,129,151,159,172,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,221,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'operand3':([23,28,29,30,37,85,98,99,124,125,127,129,151,159,172,176,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,224,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'operand4':([23,28,29,30,37,85,89,98,99,124,125,127,129,151,159,172,176,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[88,88,88,88,88,88,177,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'monadic_operator':([23,28,29,30,37,85,98,99,124,125,127,129,151,159,172,176,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'referenced_location':([23,28,29,30,37,85,89,98,99,124,125,127,129,151,159,172,176,205,214,223,226,230,233,235,237,240,241,258,259,268,287,295,296,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'assigning_operator':([24,],[98,]),'closed_dyadic_operator':([24,],[101,]),'arithmetic_additive_operator':([24,84,220,],[102,173,173,]),'arithmetic_multiplicative_operator':([24,86,221,],[103,176,176,]),'string_concatenation_operator':([24,84,220,],[104,174,174,]),'result':([28,29,],[113,115,]),'action_statement_list':([31,183,186,229,],[117,231,232,263,]),'control_part':([31,],[118,]),'for_control':([31,],[120,]),'while_control':([31,],[121,]),'mode':([69,74,142,155,250,255,275,323,],[132,152,207,216,280,284,300,329,]),'mode_name':([69,74,142,155,250,255,275,323,],[134,134,134,134,134,134,134,134,]),'discrete_mode':([69,74,142,155,250,255,275,323,],[135,135,135,135,135,135,135,135,]),'reference_mode':([69,74,142,155,250,255,275,323,],[136,136,136,136,136,136,136,136,]),'composite_mode':([69,74,142,155,250,255,275,323,],[137,137,137,137,137,137,137,137,]),'string_mode':([69,74,142,155,250,255,275,323,],[143,143,143,143,143,143,143,143,]),'array_mode':([69,74,142,155,250,255,275,323,],[144,144,144,144,144,144,144,144,]),'struct_mode':([69,74,142,155,250,255,275,323,],[145,145,145,145,145,145,145,145,]),'procedure_definition':([78,],[156,]),'operator1':([82,],[159,]),'relational_operator':([82,],[160,]),'membership_operator':([82,],[161,]),'operator2':([84,220,],[172,172,]),'then_clause':([116,264,],[182,291,]),'iteration':([123,],[188,]),'step_enumeration':([123,],[189,]),'range_enumeration':([123,],[190,]),'loop_counter':([123,],[191,]),'parameter_list':([125,127,],[195,200,]),'parameter':([125,127,237,],[196,196,271,]),'expression_list':([129,],[201,]),'initialization':([132,],[204,]),'constant_expression':([151,214,],[212,251,]),'then_expression':([175,289,310,],[222,311,324,]),'else_clause':([182,291,],[228,312,]),'index_mode_list':([209,],[244,]),'index_mode':([209,276,],[245,301,]),'literal_range':([209,276,],[246,246,]),'field_list':([210,],[248,]),'fields_declaration':([210,279,],[249,303,]),'formal_parameter_list':([219,],[252,]),'formal_parameter':([219,282,],[253,307,]),'empty':([219,],[254,]),'else_expression':([222,257,],[256,286,]),'elseif_expression':([222,],[257,]),'start_value':([233,],[266,]),'range_definition':([235,268,],[269,297,]),'parameter_spec':([255,],[283,]),'end_value':([266,293,294,314,],[292,313,315,325,]),'step_value':([266,],[293,]),'element_mode':([275,],[299,]),'result_spec':([281,],[305,]),'procedure_body_statement_list':([304,322,],[318,328,]),'procedure_body_statement':([304,318,322,328,],[319,327,319,327,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','parser.py',8),
  ('program -> statement','program',1,'p_program','parser.py',9),
  ('statement -> declaration_statement','statement',1,'p_statement','parser.py',18),
  ('statement -> synonym_statement','statement',1,'p_statement','parser.py',19),
  ('statement -> newmode_statement','statement',1,'p_statement','parser.py',20),
  ('statement -> procedure_statement','statement',1,'p_statement','parser.py',21),
  ('statement -> action_statement','statement',1,'p_statement','parser.py',22),
  ('declaration_statement -> DCL declaration_list SEMICOLON','declaration_statement',3,'p_declaration_statement','parser.py',28),
  ('declaration_list -> declaration_list COMMA declaration','declaration_list',3,'p_declaration_list','parser.py',33),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',34),
  ('declaration -> identifier_list mode','declaration',2,'p_declaration','parser.py',43),
  ('declaration -> identifier_list mode initialization','declaration',3,'p_declaration','parser.py',44),
  ('initialization -> EQUALS expression','initialization',2,'p_initialization','parser.py',52),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',57),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',58),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','parser.py',67),
  ('synonym_statement -> SYN synonym_list SEMICOLON','synonym_statement',3,'p_synonym_statement','parser.py',73),
  ('synonym_list -> synonym_list COMMA synonym_definition','synonym_list',3,'p_synonym_list','parser.py',78),
  ('synonym_list -> synonym_definition','synonym_list',1,'p_synonym_list','parser.py',79),
  ('synonym_definition -> identifier_list EQUALS constant_expression','synonym_definition',3,'p_synonym_definition','parser.py',88),
  ('synonym_definition -> identifier_list mode EQUALS constant_expression','synonym_definition',4,'p_synonym_definition','parser.py',89),
  ('constant_expression -> expression','constant_expression',1,'p_constant_expression','parser.py',97),
  ('newmode_statement -> TYPE newmode_list SEMICOLON','newmode_statement',3,'p_newmode_statement','parser.py',103),
  ('newmode_list -> newmode_list COMMA mode_definition','newmode_list',3,'p_newmode_list','parser.py',108),
  ('newmode_list -> mode_definition','newmode_list',1,'p_newmode_list','parser.py',109),
  ('mode_definition -> identifier_list EQUALS mode','mode_definition',3,'p_mode_definition','parser.py',118),
  ('procedure_statement -> label COLON procedure_definition SEMICOLON','procedure_statement',4,'p_procedure_statement','parser.py',124),
  ('procedure_definition -> PROC LPARENS formal_parameter_list RPARENS SEMICOLON procedure_body_statement_list END','procedure_definition',7,'p_procedure_definition','parser.py',129),
  ('procedure_definition -> PROC LPARENS formal_parameter_list RPARENS result_spec SEMICOLON procedure_body_statement_list END','procedure_definition',8,'p_procedure_definition','parser.py',130),
  ('formal_parameter_list -> formal_parameter_list COMMA formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','parser.py',138),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','parser.py',139),
  ('formal_parameter_list -> empty','formal_parameter_list',1,'p_formal_parameter_list','parser.py',140),
  ('formal_parameter -> identifier_list parameter_spec','formal_parameter',2,'p_formal_parameter','parser.py',152),
  ('parameter_spec -> mode LOC','parameter_spec',2,'p_parameter_spec','parser.py',157),
  ('parameter_spec -> mode','parameter_spec',1,'p_parameter_spec','parser.py',158),
  ('result_spec -> RETURNS LPARENS mode RPARENS','result_spec',4,'p_result_spec','parser.py',166),
  ('result_spec -> RETURNS LPARENS mode LOC RPARENS','result_spec',5,'p_result_spec','parser.py',167),
  ('procedure_body_statement_list -> procedure_body_statement_list procedure_body_statement','procedure_body_statement_list',2,'p_procedure_body_statement_list','parser.py',175),
  ('procedure_body_statement_list -> procedure_body_statement','procedure_body_statement_list',1,'p_procedure_body_statement_list','parser.py',176),
  ('procedure_body_statement -> declaration_statement','procedure_body_statement',1,'p_procedure_body_statement','parser.py',185),
  ('procedure_body_statement -> action_statement','procedure_body_statement',1,'p_procedure_body_statement','parser.py',186),
  ('action_statement_list -> action_statement_list action_statement','action_statement_list',2,'p_action_statement_list','parser.py',192),
  ('action_statement_list -> action_statement','action_statement_list',1,'p_action_statement_list','parser.py',193),
  ('action_statement -> label COLON action SEMICOLON','action_statement',4,'p_action_statement','parser.py',202),
  ('action_statement -> action SEMICOLON','action_statement',2,'p_action_statement','parser.py',203),
  ('label -> IDENTIFIER','label',1,'p_label','parser.py',211),
  ('action -> bracketed_action','action',1,'p_action','parser.py',216),
  ('action -> assert_action','action',1,'p_action','parser.py',217),
  ('action -> assignment_action','action',1,'p_action','parser.py',218),
  ('action -> call_action','action',1,'p_action','parser.py',219),
  ('action -> exit_action','action',1,'p_action','parser.py',220),
  ('action -> return_action','action',1,'p_action','parser.py',221),
  ('action -> result_action','action',1,'p_action','parser.py',222),
  ('bracketed_action -> if_action','bracketed_action',1,'p_bracketed_action','parser.py',227),
  ('bracketed_action -> do_action','bracketed_action',1,'p_bracketed_action','parser.py',228),
  ('assert_action -> ASSERT boolean_expression','assert_action',2,'p_assert_action','parser.py',233),
  ('assignment_action -> location assigning_operator expression','assignment_action',3,'p_assignment_action','parser.py',238),
  ('assigning_operator -> EQUALS','assigning_operator',1,'p_assigning_operator','parser.py',243),
  ('assigning_operator -> closed_dyadic_operator EQUALS','assigning_operator',2,'p_assigning_operator','parser.py',244),
  ('closed_dyadic_operator -> arithmetic_additive_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',252),
  ('closed_dyadic_operator -> arithmetic_multiplicative_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',253),
  ('closed_dyadic_operator -> string_concatenation_operator','closed_dyadic_operator',1,'p_closed_dyadic_operator','parser.py',254),
  ('if_action -> IF boolean_expression then_clause FI','if_action',4,'p_if_action','parser.py',259),
  ('if_action -> IF boolean_expression then_clause else_clause FI','if_action',5,'p_if_action','parser.py',260),
  ('then_clause -> THEN action_statement_list','then_clause',2,'p_then_clause','parser.py',268),
  ('else_clause -> ELSE action_statement_list','else_clause',2,'p_else_clause','parser.py',273),
  ('else_clause -> ELSEIF boolean_expression then_clause','else_clause',3,'p_else_clause','parser.py',274),
  ('else_clause -> ELSEIF boolean_expression then_clause else_clause','else_clause',4,'p_else_clause','parser.py',275),
  ('do_action -> DO action_statement_list OD','do_action',3,'p_do_action','parser.py',285),
  ('do_action -> DO control_part SEMICOLON action_statement_list OD','do_action',5,'p_do_action','parser.py',286),
  ('control_part -> for_control','control_part',1,'p_control_part','parser.py',294),
  ('control_part -> while_control','control_part',1,'p_control_part','parser.py',295),
  ('for_control -> FOR iteration','for_control',2,'p_for_control','parser.py',300),
  ('iteration -> step_enumeration','iteration',1,'p_iteration','parser.py',305),
  ('iteration -> range_enumeration','iteration',1,'p_iteration','parser.py',306),
  ('step_enumeration -> loop_counter EQUALS start_value end_value','step_enumeration',4,'p_step_enumeration','parser.py',311),
  ('step_enumeration -> loop_counter EQUALS start_value step_value end_value','step_enumeration',5,'p_step_enumeration','parser.py',312),
  ('step_enumeration -> loop_counter EQUALS start_value DOWN end_value','step_enumeration',5,'p_step_enumeration','parser.py',313),
  ('step_enumeration -> loop_counter EQUALS start_value step_value DOWN end_value','step_enumeration',6,'p_step_enumeration','parser.py',314),
  ('loop_counter -> IDENTIFIER','loop_counter',1,'p_loop_counter','parser.py',326),
  ('start_value -> expression','start_value',1,'p_start_value','parser.py',332),
  ('step_value -> BY expression','step_value',2,'p_step_value','parser.py',338),
  ('end_value -> TO expression','end_value',2,'p_end_value','parser.py',344),
  ('range_enumeration -> loop_counter IN range_definition','range_enumeration',3,'p_range_enumeration','parser.py',350),
  ('range_enumeration -> loop_counter DOWN IN range_definition','range_enumeration',4,'p_range_enumeration','parser.py',351),
  ('range_definition -> expression','range_definition',1,'p_range_definition','parser.py',360),
  ('while_control -> WHILE boolean_expression','while_control',2,'p_while_control','parser.py',365),
  ('call_action -> procedure_call','call_action',1,'p_call_action','parser.py',370),
  ('call_action -> builtin_call','call_action',1,'p_call_action','parser.py',371),
  ('exit_action -> EXIT label','exit_action',2,'p_exit_action','parser.py',376),
  ('return_action -> RETURN','return_action',1,'p_return_action','parser.py',381),
  ('return_action -> RETURN result','return_action',2,'p_return_action','parser.py',382),
  ('result_action -> RESULT result','result_action',2,'p_result_action','parser.py',390),
  ('result -> expression','result',1,'p_result','parser.py',395),
  ('builtin_call -> builtin_name LPARENS RPARENS','builtin_call',3,'p_builtin_call','parser.py',400),
  ('builtin_call -> builtin_name LPARENS parameter_list RPARENS','builtin_call',4,'p_builtin_call','parser.py',401),
  ('builtin_name -> NUM','builtin_name',1,'p_builtin_name','parser.py',409),
  ('builtin_name -> PRED','builtin_name',1,'p_builtin_name','parser.py',410),
  ('builtin_name -> SUCC','builtin_name',1,'p_builtin_name','parser.py',411),
  ('builtin_name -> UPPER','builtin_name',1,'p_builtin_name','parser.py',412),
  ('builtin_name -> LOWER','builtin_name',1,'p_builtin_name','parser.py',413),
  ('builtin_name -> LENGTH','builtin_name',1,'p_builtin_name','parser.py',414),
  ('builtin_name -> READ','builtin_name',1,'p_builtin_name','parser.py',415),
  ('builtin_name -> PRINT','builtin_name',1,'p_builtin_name','parser.py',416),
  ('builtin_name -> NEW','builtin_name',1,'p_builtin_name','parser.py',417),
  ('builtin_name -> FREE','builtin_name',1,'p_builtin_name','parser.py',418),
  ('mode -> mode_name','mode',1,'p_mode','parser.py',424),
  ('mode -> discrete_mode','mode',1,'p_mode','parser.py',425),
  ('mode -> reference_mode','mode',1,'p_mode','parser.py',426),
  ('mode -> composite_mode','mode',1,'p_mode','parser.py',427),
  ('mode_name -> IDENTIFIER','mode_name',1,'p_mode_name','parser.py',432),
  ('discrete_mode -> INT','discrete_mode',1,'p_discrete_mode','parser.py',437),
  ('discrete_mode -> BOOL','discrete_mode',1,'p_discrete_mode','parser.py',438),
  ('discrete_mode -> CHAR','discrete_mode',1,'p_discrete_mode','parser.py',439),
  ('reference_mode -> REF mode','reference_mode',2,'p_reference_mode','parser.py',444),
  ('composite_mode -> string_mode','composite_mode',1,'p_composite_mode','parser.py',449),
  ('composite_mode -> array_mode','composite_mode',1,'p_composite_mode','parser.py',450),
  ('composite_mode -> struct_mode','composite_mode',1,'p_composite_mode','parser.py',451),
  ('string_mode -> CHARS LBRACKET integer_literal RBRACKET','string_mode',4,'p_string_mode','parser.py',456),
  ('array_mode -> ARRAY LBRACKET index_mode_list RBRACKET element_mode','array_mode',5,'p_array_mode','parser.py',461),
  ('element_mode -> mode','element_mode',1,'p_element_mode','parser.py',466),
  ('index_mode_list -> index_mode_list COMMA index_mode','index_mode_list',3,'p_index_mode_list','parser.py',471),
  ('index_mode_list -> index_mode','index_mode_list',1,'p_index_mode_list','parser.py',472),
  ('index_mode -> literal_range','index_mode',1,'p_index_mode','parser.py',481),
  ('struct_mode -> STRUCT LPARENS field_list RPARENS','struct_mode',4,'p_struct_mode','parser.py',486),
  ('field_list -> field_list COMMA fields_declaration','field_list',3,'p_field_list','parser.py',491),
  ('field_list -> fields_declaration','field_list',1,'p_field_list','parser.py',492),
  ('fields_declaration -> identifier_list mode','fields_declaration',2,'p_fields_declaration','parser.py',501),
  ('literal_range -> integer_literal COLON integer_literal','literal_range',3,'p_literal_range','parser.py',506),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',512),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',513),
  ('expression -> operand0','expression',1,'p_expression','parser.py',522),
  ('expression -> conditional_expression','expression',1,'p_expression','parser.py',523),
  ('conditional_expression -> IF boolean_expression then_expression else_expression FI','conditional_expression',5,'p_conditional_expression','parser.py',528),
  ('conditional_expression -> IF boolean_expression then_expression elseif_expression else_expression FI','conditional_expression',6,'p_conditional_expression','parser.py',529),
  ('boolean_expression -> expression','boolean_expression',1,'p_boolean_expression','parser.py',537),
  ('then_expression -> THEN expression','then_expression',2,'p_then_expression','parser.py',542),
  ('elseif_expression -> elseif_expression ELSEIF boolean_expression then_expression','elseif_expression',4,'p_elseif_expression','parser.py',547),
  ('elseif_expression -> ELSEIF boolean_expression then_expression','elseif_expression',3,'p_elseif_expression','parser.py',548),
  ('else_expression -> ELSE expression','else_expression',2,'p_else_expression','parser.py',556),
  ('operand0 -> operand0 operator1 operand1','operand0',3,'p_operand0','parser.py',561),
  ('operand0 -> operand1','operand0',1,'p_operand0','parser.py',562),
  ('operator1 -> relational_operator','operator1',1,'p_operator1','parser.py',570),
  ('operator1 -> membership_operator','operator1',1,'p_operator1','parser.py',571),
  ('relational_operator -> AND','relational_operator',1,'p_relational_operator','parser.py',577),
  ('relational_operator -> OR','relational_operator',1,'p_relational_operator','parser.py',578),
  ('relational_operator -> NOT','relational_operator',1,'p_relational_operator','parser.py',579),
  ('relational_operator -> EQ','relational_operator',1,'p_relational_operator','parser.py',580),
  ('relational_operator -> NEQ','relational_operator',1,'p_relational_operator','parser.py',581),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',582),
  ('relational_operator -> GE','relational_operator',1,'p_relational_operator','parser.py',583),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',584),
  ('relational_operator -> LE','relational_operator',1,'p_relational_operator','parser.py',585),
  ('membership_operator -> IN','membership_operator',1,'p_membership_operator','parser.py',590),
  ('operand1 -> operand1 operator2 operand2','operand1',3,'p_operand1','parser.py',595),
  ('operand1 -> operand2','operand1',1,'p_operand1','parser.py',596),
  ('operator2 -> arithmetic_additive_operator','operator2',1,'p_operator2','parser.py',604),
  ('operator2 -> string_concatenation_operator','operator2',1,'p_operator2','parser.py',605),
  ('arithmetic_additive_operator -> PLUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',610),
  ('arithmetic_additive_operator -> MINUS','arithmetic_additive_operator',1,'p_arithmetic_additive_operator','parser.py',611),
  ('string_concatenation_operator -> STRINGCONCAT','string_concatenation_operator',1,'p_string_concatenation_operator','parser.py',616),
  ('operand2 -> operand2 arithmetic_multiplicative_operator operand3','operand2',3,'p_operand2','parser.py',621),
  ('operand2 -> operand3','operand2',1,'p_operand2','parser.py',622),
  ('arithmetic_multiplicative_operator -> TIMES','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',630),
  ('arithmetic_multiplicative_operator -> DIVIDE','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',631),
  ('arithmetic_multiplicative_operator -> MODULO','arithmetic_multiplicative_operator',1,'p_arithmetic_multiplicative_operator','parser.py',632),
  ('operand3 -> operand4','operand3',1,'p_operand3','parser.py',637),
  ('operand3 -> monadic_operator operand4','operand3',2,'p_operand3','parser.py',638),
  ('monadic_operator -> MINUS','monadic_operator',1,'p_monadic_operator','parser.py',646),
  ('monadic_operator -> NOT','monadic_operator',1,'p_monadic_operator','parser.py',647),
  ('operand4 -> location','operand4',1,'p_operand4','parser.py',652),
  ('operand4 -> referenced_location','operand4',1,'p_operand4','parser.py',653),
  ('operand4 -> primitive_value','operand4',1,'p_operand4','parser.py',654),
  ('location -> location_name','location',1,'p_location','parser.py',660),
  ('location -> dereferenced_reference','location',1,'p_location','parser.py',661),
  ('location -> composite_element','location',1,'p_location','parser.py',662),
  ('location -> composite_slice','location',1,'p_location','parser.py',663),
  ('location -> procedure_call','location',1,'p_location','parser.py',664),
  ('location_name -> IDENTIFIER','location_name',1,'p_location_name','parser.py',669),
  ('dereferenced_reference -> primitive_value ARROW','dereferenced_reference',2,'p_dereferenced_reference','parser.py',674),
  ('composite_element -> location LBRACKET expression RBRACKET','composite_element',4,'p_composite_element','parser.py',680),
  ('composite_slice -> location LBRACKET expression COLON expression RBRACKET','composite_slice',6,'p_composite_slice','parser.py',686),
  ('referenced_location -> ARROW location','referenced_location',2,'p_referenced_location','parser.py',691),
  ('primitive_value -> literal','primitive_value',1,'p_primitive_value','parser.py',697),
  ('primitive_value -> value_array_element','primitive_value',1,'p_primitive_value','parser.py',698),
  ('primitive_value -> value_array_slice','primitive_value',1,'p_primitive_value','parser.py',699),
  ('primitive_value -> parenthesized_expression','primitive_value',1,'p_primitive_value','parser.py',700),
  ('literal -> integer_literal','literal',1,'p_literal','parser.py',706),
  ('literal -> boolean_literal','literal',1,'p_literal','parser.py',707),
  ('literal -> character_literal','literal',1,'p_literal','parser.py',708),
  ('literal -> empty_literal','literal',1,'p_literal','parser.py',709),
  ('literal -> character_string_literal','literal',1,'p_literal','parser.py',710),
  ('integer_literal -> NUMBERCONST','integer_literal',1,'p_integer_literal','parser.py',715),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','parser.py',720),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','parser.py',721),
  ('character_literal -> CHARCONST','character_literal',1,'p_character_literal','parser.py',726),
  ('empty_literal -> NULL','empty_literal',1,'p_empty_literal','parser.py',731),
  ('character_string_literal -> STRINGCONST','character_string_literal',1,'p_character_string_literal','parser.py',736),
  ('value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET','value_array_element',4,'p_value_array_element','parser.py',742),
  ('value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET','value_array_slice',6,'p_value_array_slice','parser.py',747),
  ('array_primitive_value -> primitive_value','array_primitive_value',1,'p_array_primitive_value','parser.py',752),
  ('parenthesized_expression -> LPARENS expression RPARENS','parenthesized_expression',3,'p_parenthesized_expression','parser.py',757),
  ('procedure_call -> procedure_name LPARENS RPARENS','procedure_call',3,'p_procedure_call','parser.py',763),
  ('procedure_call -> procedure_name LPARENS parameter_list RPARENS','procedure_call',4,'p_procedure_call','parser.py',764),
  ('procedure_name -> IDENTIFIER','procedure_name',1,'p_procedure_name','parser.py',772),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parser.py',777),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',778),
  ('parameter -> expression','parameter',1,'p_parameter','parser.py',787),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',791),
]
